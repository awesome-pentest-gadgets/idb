#! /bin/sh
## iOS Debug Bridge"
# An emulation of a handful of useful adb commands I use for Android devices,
# adapted for jailbroken iOS devices connected via USB.
# Supports only one iDevice plugged in at a time as of now.
#
### Usage:
# idb push /path/on/computer/filename /path/on/idevice/[filename]
#     Copies a file from the computer to the iDevice.
# idb pull /path/on/idevice/filename /path/on/computer/[filename]
#     Copies a file from the iDevice to the computer.
# idb shell
#     Starts a remote shell on the iDevice.
# idb shell [command]
#     Starts a remote shell on the iDevice, runs the given command, and exits.
#
### System Requirements:
#     usbmuxd (https://github.com/libimobiledevice/usbmuxd.git) needs to be
# running for this to work. Tested on Debian Linux, but probably works in
# Mac OS (or Windows with MSYS/Cygwin), based on past experience. On those
# platforms, installing iTunes from Apple will get you usbmuxd, but you'll
# still need to compile the "iproxy" tool from the open-source clone of
# libusbmuxd (see below).
#
#     "iproxy", found at https://github.com/libimobiledevice/libusbmuxd.git
# Put the binary in a directory in your $PATH variable. I use "iproxy-quiet",
# which is a custom version of it I made that doesn't print information except
# on certain errors (i.e. it follows the unix philosophy better). You will have
# to edit this file to use regular iproxy.
#
#     Included in this repository is a patch which should allow you to build
# your own "iproxy-quiet". Apply the patch with either
# `git apply iproxy-quiet.patch` or `patch -p1 < iproxy-quiet.patch` from the
# libusbmuxd source root.
#
#     The device has to be connected via USB and have sshd listening on the port
# defined below as REMOTEPORT. Due to the sshd requirement, the device must be
# jailbroken. In Cydia, sshd is installed through the package "OpenSSH" (called
# "openssh", note the casing, if you install it via apt on the command-line).
#
#     Note also that you can get openssh either from Saurik's repository
# (available by default on basically any jailbroken iDevice), or from other
# sources like ios-webstack (see http://ios-webstack.tk ). ios-webstack has
# a newer version of OpenSSH than Saurik's repository does as of January 2018.
#
#     This script can probably be easily adapted for wireless transfers by
# commenting out the iproxy stuff and changing the IP address/LOCALPORT to
# the device address and the port that it's sshd is listening on.
#
#     To avoid having to type a password every time, set up key authentication
# between the computer and the iDevice.
# On the computer:
#   ssh-keygen
#   (leave default filenames for the keys)
#   ssh-keygen -p
#   (leave default filenames for the keys)
#
# On the iDevice:
#   mkdir /var/mobile/.ssh
#   echo authstr >> /var/mobile/.ssh/authorized_keys
#   #(where authstr is the output of `cat ~/.ssh/id_rsa.pub` on the computer)

LOCALPORT=2222 # port on computer this runs on
REMOTEPORT=50022 # port sshd runs on on the device
IPADDR="127.0.0.1"
USER="mobile" # user on iDevice

IPROXYPID="" # placeholder


startRelay() {
	# hide iproxy output. Look here if you can't make it work and remove the
	# pipe.
	iproxy-quiet "$LOCALPORT" "$REMOTEPORT" > /dev/null 2>&1 &
	IPROXYPID="$!"
}

if [ "$1" = "push" ]; then
	startRelay > /dev/null 2>&1
	scp -P"$LOCALPORT" "$2" "$USER""@""$IPADDR"":""$3"
elif [ "$1" = "pull" ]; then
	startRelay
	scp -P"$LOCALPORT" "$USER""@""$IPADDR"":""$2" "$3"
elif [ "$1" = "shell" ]; then
	startRelay
	if [ "$#" -eq 1 ]; then # if no command is specified, start a shell
		ssh -p"$LOCALPORT" "$USER""@""$IPADDR"
	else # run the command on the remote device
		shift 1 # strip first argument (i.e., "shell"), leaving only remaining args
		ssh -p"$LOCALPORT" "$USER""@""$IPADDR" "$@"
	fi
fi

# clean-up
kill "$IPROXYPID" 2>/dev/null
true #return 0
